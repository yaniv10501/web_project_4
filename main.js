!function(){"use strict";var e={name:"",job:"",picture:"",_id:""},t={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},n=document.querySelector(".content"),o=document.querySelector(".spinner"),r=document.querySelector("#photo").content,i=document.querySelector(".profile__edit-button"),u=document.querySelector(".profile__add-button"),a=document.querySelector(".popup__form[name='add']"),c=document.querySelector(".popup__form[name='editInfo']"),s=document.querySelector(".popup__form[name='editPicture']"),l=document.querySelector(".popup__form[name='delete']"),p=document.querySelector(".popup__input_type_name"),f=document.querySelector(".popup__input_type_about"),h=document.querySelector(".profile__edit-pic"),_=l.querySelector(t.submitButtonSelector),d=s.querySelector(t.submitButtonSelector),y=c.querySelector(t.submitButtonSelector),m=a.querySelector(t.submitButtonSelector);function v(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var b=function(){function e(t){var n=t.baseUrl,o=t.authorization;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._authorization=o}var t,n;return t=e,(n=[{key:"_checkRes",value:function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}},{key:"getUserInfo",value:function(){var e=this;return fetch("".concat(this._baseUrl,"/users/me"),{headers:{authorization:this._authorization}}).then((function(t){return e._checkRes(t)}))}},{key:"getIntialCard",value:function(){var e=this;return fetch("".concat(this._baseUrl,"/cards"),{headers:{authorization:this._authorization}}).then((function(t){return e._checkRes(t)}))}},{key:"setUserinfo",value:function(e){var t=this,n=e.name,o=e.about;return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:{authorization:this._authorization,"Content-Type":"application/json"},body:JSON.stringify({name:n,about:o})}).then((function(e){return t._checkRes(e)}))}},{key:"setUserPicture",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:{authorization:this._authorization,"Content-Type":"application/json"},body:JSON.stringify({avatar:e})}).then((function(e){return t._checkRes(e)}))}},{key:"addCard",value:function(e){var t=this,n=e.name,o=e.link;return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:{authorization:this._authorization,"Content-Type":"application/json"},body:JSON.stringify({name:n,link:o})}).then((function(e){return t._checkRes(e)}))}},{key:"deleteCard",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:{authorization:this._authorization}}).then((function(e){return t._checkRes(e)}))}},{key:"addLike",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:{authorization:this._authorization}}).then((function(e){return t._checkRes(e)}))}},{key:"removeLike",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:{authorization:this._authorization}}).then((function(e){return t._checkRes(e)}))}}])&&v(t.prototype,n),e}();function k(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var g=function(){function e(t,n,o,r,i,u,a,c){var s=c.handleCardClick,l=c.handleCardDelete,p=c.handleLike;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._title=t,this._url=n,this._cardId=o,this._element=a.querySelector(".photo").cloneNode(!0),this._handleCardClick=s,this._handleCardDelete=l,this._ownerId=r._id,this._userId=i,this._likeCount=u.length,this._isLikedByMe=u.some((function(e){return e._id==i})),this._handleLike=p,this._likeCountElement=this._element.querySelector(".photo__like-count"),this._likeElement=this._element.querySelector(".photo__like"),this._imageElement=this._element.querySelector(".photo__image"),this._deleteElement=this._element.querySelector(".photo__delete")}var t,n;return t=e,(n=[{key:"_setEventListeners",value:function(){this._likeElement.addEventListener("click",this._handleLike),this._deleteElement.addEventListener("click",this._handleCardDelete),this._imageElement.addEventListener("click",this._handleCardClick)}},{key:"assignLikeCount",value:function(e){this._likeCountElement.textContent=e,this._likeElement.classList.toggle("photo__like_active")}},{key:"isLiked",value:function(){return!!this._likeElement.classList.contains("photo__like_active")}},{key:"createCard",value:function(){this._userId!=this._ownerId&&this._deleteElement.classList.add("photo__delete_hidden"),this._isLikedByMe&&this._likeElement.classList.add("photo__like_active"),this._setEventListeners(),this._element.id=this._cardId,this._element.querySelector(".photo__title").textContent=this._title,this._likeCountElement.textContent=this._likeCount;var e=this._imageElement;return e.src=this._url,e.alt="A photo of ".concat(this._title),this._element}}])&&k(t.prototype,n),e}();function S(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function E(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var C=function(){function e(t,n){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),E(this,"_showInputError",(function(){var e=o._form.querySelector(".".concat(o._input.id,"-error"));o._input.classList.add(o._settingsObject.inputErrorClass),e.textContent=o._input.validationMessage,e.classList.add(o._settingsObject.errorClass)})),E(this,"_hideInputError",(function(e){var t=o._form.querySelector(".".concat(e.id,"-error"));e.classList.remove(o._settingsObject.inputErrorClass),t.classList.remove(o._settingsObject.errorClass),t.textContent=""})),E(this,"_checkInputValidity",(function(){o._input.validity.valid?o._hideInputError(o._input):o._showInputError()})),E(this,"_handleInput",(function(e){o._input=e.target,o._checkInputValidity(),o._toggleButtonState()})),this._form=t,this._settingsObject=n,this._inputList=Array.from(this._form.querySelectorAll(this._settingsObject.inputSelector)),this._submitButton=this._form.querySelector(this._settingsObject.submitButtonSelector)}var t,n;return t=e,(n=[{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput(this._inputList)?(this._submitButton.classList.add(this._settingsObject.inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._settingsObject.inactiveButtonClass),this._submitButton.disabled=!1)}},{key:"_setEventListeners",value:function(){var e=this;this._toggleButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",e._handleInput)}))}},{key:"resetValidation",value:function(){this._toggleButtonState(),this._inputList.forEach(this._hideInputError)}},{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&S(t.prototype,n),e}();function w(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var L=function(){function e(t,n){var o=t.items,r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=o,this._renderer=r,this._section=document.querySelector(n)}var t,n;return t=e,(n=[{key:"addItems",value:function(e){this._section.append(e)}},{key:"prependItems",value:function(e){this._section.prepend(e)}},{key:"renderSection",value:function(e){e?e.forEach(this._renderer):this._items.forEach(this._renderer)}}])&&w(t.prototype,n),e}();function j(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function P(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var O=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),P(this,"_escapeKeyHandler",(function(e){"Escape"===e.key&&n.closePopup()})),P(this,"_popupClickHandler",(function(e){(e.target.classList.contains("popup")||e.target.classList.contains("popup__close-button"))&&n.closePopup()})),this._popupSelector=t,this._popup=document.querySelector(this._popupSelector)}var t,n;return t=e,(n=[{key:"closePopup",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._escapeKeyHandler)}},{key:"setEventListeners",value:function(){this._popup.addEventListener("click",this._popupClickHandler)}},{key:"openPopup",value:function(){document.addEventListener("keydown",this._escapeKeyHandler),this._popup.classList.add("popup_opened")}}])&&j(t.prototype,n),e}();function I(e){return I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},I(e)}function q(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function R(e,t,n){return R="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=B(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(n):r.value}},R(e,t,n||e)}function T(e,t){return T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},T(e,t)}function U(e,t){if(t&&("object"===I(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function B(e){return B=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},B(e)}var x=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&T(e,t)}(u,e);var t,n,o,r,i=(o=u,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=B(o);if(r){var n=B(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return U(this,e)});function u(e,t){var n,o=t.imageSelector,r=t.titleSelector;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._popupImage=n._popup.querySelector(o),n._popupImageTitle=n._popup.querySelector(r),n}return t=u,(n=[{key:"openPopup",value:function(e){var t=e.name,n=e.link;this._popupImage.alt="Full screen image of ".concat(t),this._popupImageTitle.textContent=t,this._popupImage.src=n,R(B(u.prototype),"openPopup",this).call(this)}}])&&q(t.prototype,n),u}(O);function z(e){return z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},z(e)}function D(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function V(e,t,n){return V="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=N(e)););return e}(e,t);if(o){var r=Object.getOwnPropertyDescriptor(o,t);return r.get?r.get.call(n):r.value}},V(e,t,n||e)}function H(e,t){return H=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},H(e,t)}function A(e,t){if(t&&("object"===z(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function N(e){return N=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},N(e)}var J=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&H(e,t)}(u,e);var t,n,o,r,i=(o=u,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=N(o);if(r){var n=N(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return A(this,e)});function u(e,t){var n,o=t.handleSubmit,r=t.formReset;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._handleSubmit=o,n._formReset=r,n._inputList=n._popup.querySelectorAll(".popup__input"),n}return t=u,(n=[{key:"_getInputValues",value:function(){var e={};return this._inputList.forEach((function(t){e[t.name]=t.value})),e}},{key:"setEventListeners",value:function(){var e=this;V(N(u.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._handleSubmit(e._getInputValues())}))}},{key:"closePopup",value:function(){V(N(u.prototype),"closePopup",this).call(this),this._formReset()}}])&&D(t.prototype,n),u}(O);function K(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var M=function(){function e(t){var n=t.name,o=t.job,r=t.picture;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(n),this._job=document.querySelector(o),this._picture=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,job:this._job.textContent}}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.job;this._name.textContent=t,this._job.textContent=n}},{key:"setUserPicture",value:function(e){this._picture.style.backgroundImage="url(".concat(e,")")}}])&&K(t.prototype,n),e}(),F=new b({baseUrl:"https://around.nomoreparties.co/v1/group-12",authorization:"12be1991-4f28-449f-a9a9-71d4704b25a2"}),Y=new M({name:".profile__name",job:".profile__description",picture:".profile__pic"}),G=new C(a,t),Q=new C(c,t),W=new C(s,t),X=function(){var e=Y.getUserInfo(),t=e.name,n=e.job;p.value=t,f.value=n},Z=new x(".popup_type_image",{imageSelector:".popup__image",titleSelector:".popup__image-title"});Z.setEventListeners(),G.enableValidation();var $=new J(".popup_type_edit-picture",{handleSubmit:function(e){var t=e.picture;d.textContent="Saving...",F.setUserPicture(t).then((function(){Y.setUserPicture(t)})).then((function(){$.closePopup()})).catch((function(e){return console.log(e)})).finally((function(){return setTimeout((function(){d.textContent="Save"}),600)}))},formReset:function(){s.reset(),W.resetValidation()}});$.setEventListeners();var ee=new J(".popup_type_add",{handleSubmit:function(e){var t=e.title,n=e.url;m.textContent="Creating...",F.addCard({name:t,link:n}).then((function(e){var t,n;n=oe({name:(t=e).name,link:t.link,_id:t._id,owner:t.owner,likes:t.likes}),re.prependItems(n),ee.closePopup()})).catch((function(e){return console.log(e)})).finally((function(){return setTimeout((function(){m.textContent="Create"}),600)}))},formReset:function(){a.reset(),G.resetValidation()}});ee.setEventListeners();var te=new J(".popup_type_edit-info",{handleSubmit:function(e){var t=e.name,n=e.job;y.textContent="Saving...",F.setUserinfo({name:t,about:n}).then((function(){Y.setUserInfo({name:t,job:n})})).then((function(){te.closePopup()})).catch((function(e){return console.log(e)})).finally((function(){return setTimeout((function(){y.textContent="Save"}),600)}))},formReset:function(){X(),Q.resetValidation()}});te.setEventListeners();var ne=new J(".popup_type_delete",{handleSubmit:function(){_.textContent="Deleting...",F.deleteCard(l._id).then((function(){var e=document.querySelector(".photo[id='".concat(l._id,"']"));e.remove(),e=null,l._id=""})).then((function(){ne.closePopup()})).catch((function(e){return console.log(e)})).finally((function(){return setTimeout((function(){_.textContent="Yes"}),600)}))},formReset:function(){return l._id=""}});function oe(t){var n=t.name,o=t.link,i=t._id,u=t.owner,a=t.likes,c=new g(n,o,i,u,e._id,a,r,{handleCardClick:function(){Z.openPopup({name:n,link:o})},handleCardDelete:function(){ne.openPopup(),l._id=i},handleLike:function(){c.isLiked()?F.removeLike(i).then((function(e){return c.assignLikeCount(e.likes.length)})).catch((function(e){return console.log(e)})):F.addLike(i).then((function(e){return c.assignLikeCount(e.likes.length)})).catch((function(e){return console.log(e)}))}});return c.createCard()}ne.setEventListeners();var re=new L({items:null,renderer:function(e){var t=oe({name:e.name,link:e.link,_id:e._id,owner:e.owner,likes:e.likes});re.addItems(t)}},".photos__grid");Promise.all([F.getUserInfo(),F.getIntialCard()]).then((function(t){e.name=t[0].name,e.job=t[0].about,e.picture=t[0].avatar,e._id=t[0]._id,re.renderSection(t[1])})).then((function(){Y.setUserInfo({name:e.name,job:e.job}),Y.setUserPicture(e.picture),X(),Q.enableValidation(),W.enableValidation(),o.classList.add("spinner_hidden"),n.classList.remove("content_hidden")})).catch((function(e){return console.log(e)})),i.addEventListener("click",(function(){te.openPopup()})),u.addEventListener("click",(function(){ee.openPopup()})),h.addEventListener("click",(function(){$.openPopup()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,